                                            Essential C++

                                        chapter 3 泛型编程风格


# ********************************* chapter 3.1 指针的算术运算 ********************************* #

# Standard Template Library (STL)
    
    主要组件：
        容器：vector、list、set、map 等类
        泛型算法：find()、sort()、replace()、merge() 等

        顺序性容器：vector、list，主要进行迭代操作
        关联容器：map、set，主要让我们快速查找容器中的元素

# 泛型算法提供了许多可作用于容器和数组类型上的操作，这些操作和元素类型无关
    
# 当数组被传递给函数时，或是有函数返回时，仅有第一个元素的地址被传递

    在函数传递数组可以通过下标索引访问元素，下表索引自动进行指针的算术运算和提领操作

# 统一 find() 函数统一能对 array 和 vector 进行操作

    使用首尾指针，并封装 begin() 和 end() 函数提取 array 或 vector 的首尾元素地址


# ********************************* chapter 3.2 了解 Iterator（泛型指针） ********************************* #

# 如何定义并使用标准容器的 iterator

    每个标准容器都提供一个 begin() 函数，可返回一个 iterator 指向第一个元素；
    另一个 end() 函数会返回一个 iterator 指向最后一个元素的下一位置

# 定义一个标准库 iterator 对象 iter

    vector<string> svec;
    vector<string>::iterator iter = svec.begin(); // 可读写 iterator
    vector<string>::const_iterator iter = svec.begin(); // 只读 iterator，用于遍历操作

    iterator 提领元素和调用元素底部操作和指针一样：* . ->

# 泛型编程算法参考手册 

    Essential C++ P255 附录 B

    
# ********************************* chapter 3.3 所有容器的共通操作 ********************************* #

# 所有容器类（及 string 类）的共通操作：

    . == != 运算符，返回 true 和 false
    . = 运算符，将某个容器复制给另一个容器
    . empty() 在容器为空时返回 true，否则返回 false
    . size() 返回容器目前持有的元素个数
    . clear() 删除所有元素

# 每个容器都提供 begin() 和 end() 函数

    . begin() 返回一个 iterator，指向容器的第一个元素
    . end() 返回一个 iterator，指向容器的最后一个元素的下一个位置
      通常在容器上进行迭代操作，始于 begin() 终于 end()

# 所有容器都提供 insert() 和 erase() 函数

    . insert() 将单一或某个范围内的元素插入容器内
    . erase() 将容器内的单一元素或某一范围内的元素删除
      插入和删除操作的行为视容器本身为顺序性容器或关联容器而有所不同


# ********************************* chapter 3.4 使用顺序性容器 ********************************* #

# 顺序性容器用来维护一组排列有序、类型相同的元素

    vector 和 list 是两个最主要的顺序性容器

        vector 内的每个元素都被存储在距离起始点的固定偏移位置上
        vector 若不是在末端插入，则效率会很低
        vector 比较适合表示数列，仅需在末尾添加元素

        list 系以双向链接而非连续内存来储存内容，可以执行前进或后退操作
        list 的任意位置进行元素的插入和删除效率都较高，但是对 list 进行随机访问的效率则不高
        list 比较和时需要随机插入和删除

    deque 是第三种顺序容器

        对于最前端和最后段端的插入和删除效率较高
    
# 使用顺序容器需要包含对应的头文件

    #include <vector>
    #include <list>
    #include <deque>

# 定义顺序容器对象的五种方法

    产生空的容器
    产生特定大小的容器
    产生特定大小的容器，并为每个元素指定出值
    通过一对 iterator 产生容器
    根据某个容器产生新的容器

# 顺序容器的两个特别操作

    末尾插入：push_back()
    末尾删除：pop_back()

    list 和 deque 还提供了：push_front() 和 pop_front

    顺序容器读取最前端元素 .front()，读取最后端元素 .back()

# 顺序容器的两个通用操作

    通用出入函数 insert() 和 通用删除函数 erase()

    !!! 注意 list 不支持 iterator 的偏移运算，list.erase()需要指定被删除元素的具体位置











