                                            
                                            Essential C++

                                        chapter 2 面向过程的编程风格


# ********************************* chapter 2.1 如何编写函数 ********************************* #

# 定义函数需要四部分

    返回类型、函数名、参数列表、函数体

# 函数声明

    函数必须先声明后，才能被调用，让编译器得以检查后续出现使用方式是否正确

    // 函数声明不需要提供函数体，仅需提供函数原型
    int fibon_elem(int pos);
    int fibon_elem(int); // 可以不出示参数名称声明，因为参数名仅在函数体内使用时才是必要的

# 函数定义

    需要提供函数原型和函数体

    // 函数运行过程中出现问题（不符合条件），可以使用 exit() 对程序进行终止
    #include <cstdlib>
    exit(-1); // exit() 需要传入一个参数    

    有函数返回值时，必须在函数结尾处添加 return 语句，不然会产生编译错误


# ********************************* chapter 2.2 调用函数 ********************************* #

# pass by value
    函数调用时，会在内存中建立一块特殊区域 -> "程序堆栈"，为函数每个对象提供内存空间，
    函数对象此时为局部对象，函数执行结束之后，内存空间会被释放

    >>> 函数形参和实参没有任何关系

# pass by reference
    函数通过传递 reference 建立形参和实参数的关系

# reference 语法
    // 定义一个代表 int 对象的引用
    int &rval = ival;

    C++ 中不允许改变 reference 所代表的对象
    by reference 方式将对象作为函数参数传入时，对象本身不会复制另一份，复制的是对象地址

    # *** 使用 by reference 的好处
    1）希望函数得以直接对所传入的对象进行修改
    2）降低复制大型对象的额外负担
        如显示函数，将形参声明为 (const vector<int> &vec)
            1 避免函数复制
            2 函数不需要改变对象值，声明为 const 
    * 可以使用传入指针，达到和传入 reference 相同的效果，两者仅是使用的方法不同
      使用指针传入，出入的是地址，不会对对象进行复制，注意使用指针前应该先判断是否非 0
    * 传址机制主要用于传递 class object
    * 函数返回一般以值的形式返回，而不返回 reference 或 pointer，
      因为函数执行完成后，对象会被释放，对不存在的对象进行访址很不好

# 作用域及范围
    局部作用域（local scope）、file scope、dynamic extent（动态范围）

    * 内置类型对象，如果定义在 file scope 内，必定会被初始化为 0；
      如果定义在 local scope 内，不会被默认初始化

    * dynamic extent 由程序员分配，使用 new 申请，delete 释放，称为 heap memory（堆内存）
      heap memory 一般未经过初始化
      new 申请的动态内存会一直有效，直到 delete 释放内存空间

    # new 申请内存
        1）分配一个类型为 int 的对象，未经初始化
            int *pi = null;
            pi = new int; 
        2）指定初始化值 0
            pi = new int(0);
        3）申请数组空间，未经初始化
            int *pia = new int[24];

    # delete 释放内存
        1）释放 pi 所指向的对象
            delete pi;
        2）删除数组中的所有对象
            delete [] pia;
        3）释放内存不需要判断指针是否为空
            if(pi != 0) // 编译器会替我们检查
    
    # 内存泄漏
        应用程序在不关闭的情况下
        程序员使用 new 一直申请内存，使用完后不使用 delete 释放，就会导致 new 的空间一直存在，从而造成内存泄漏
    

# ********************************* chapter 2.3 提供默认参数值 ********************************* #

# 默认参数规则
    1）默认参数解析操作由最右边开始进行
    2）默认值只能指定一次，可以在函数声明或函数定义处，但不能两处都指定

    通常函数声明放在 .h 头文件、函数定义放在程序代码文件，默认参数一般放在函数声明处，以提供更高的可见性

# 函数输出信息
    可以通过指定默认的 ofstream 对象，将输出指定到文件
    同时可以设置 ofstream 对象默认为 0,通过判断是否进行输出


# ********************************* chapter 2.4 使用局部静态对象 ********************************* #

# 为了节省函数间的通信问题而将对象定义于 file scope 内，永远是一种冒险，会打乱不同函数间的独立性

# Fibonacci 数列可以将每次调用后计算的结果存储起来，而不需要每次从头开始计算，甚至使用上次计算存储的结果即可

# 局部静态变量
    # 使用局部静态变量，函数可以返回变量的地址，因为局部静态变量在函数结束时不会被释放
    static vector<int> elems; // 函数内定义局部静态变量

# 使用 vector 对象的函数，在 vector 末尾插入元素
    elems.push_back();


# ********************************* chapter 2.5 声明 inline 函数 ********************************* #

# 将局部代码封装成函数，可以提高可读性和泛用性，但是会给执行性能带来影响
    将函数声明为 inline，表示要求编译器在每个函数调用点上，将函数的内容展开

# inline 函数声明
    // 在函数声明前添加 inline 即可将函数声明 inline，
    inline bool fibon_elem(int pos, int &elem){}

    # 将函数指定为 inline，只是对编译器提出的一种要求，编译器是否执行，需要因编译器而定

# 适用定义 inline 函数
    1）体积小、常被调用、所从事的计算并不复杂
    2）inline 函数的定义常被放在头文件。由于编译器必须在它被调用的使用加以展开，所以这时候其定义必须是有效的


# ********************************* chapter 2.6 提供重载函数 ********************************* #

# 函数重载
    参数列表不相同（可能是参数类型不同，可能是参数个数不同）的两个或多个函数，可以拥有相同的函数名
    每个重载函数的参数列表必须和其他重载函数不同
    编译器无法根据函数返回类型来区分两个具有相同名称（参数一样，返回类型不一样）的函数

# 适用函数重载场景
    将一组实现代码不同，但工作内容相似的函数加以重载，可以让用户更容易使用这些函数


# ********************************* chapter 2.7 定义并使用模板函数  ********************************* #

# 能否将重载的参数量相同的函数只写一个函数实现
    如：vector<int>、vector<string> 等
    模板函数可以将 vector 类型绑定起来
    函数模板将参数列表中指定的全部（或部分）参数的类型信息抽离出来

# 函数模板定义
    以关键字 template 开场，其后紧跟着以成对的尖括号(< >)包围起来的一个或多个标识符，
    标识符表示希望推迟决定的类型，可以是内置类型或用户自定义类型
    如：
        template <typename elemType> // elemType 为标识符的占位符，可以取任意名词
        void display_message(const string &msg, const vector<elemType> &vec)

# 函数重载与模板函数
    一般，函数具备多种实现方式，可以将它重载，其每份实例提供的是相同的通用服务
    如果希望让程序代码的主体不变，仅改变其中的数据类型，可以使用函数模板达到目的


# ********************************* chapter 2.8 函数指针带来更大的弹性 ********************************* #

# 指针函数定义
    // 返回类型：const vector<int>*；(*seq_ptr)：* 表示指针；int：指向函数的参数
    const vector<int>* (*seq_ptr)( int );

# 指针函数定义形参，可以将在函数中调用的函数脱离出来，使用函数指针调用函数
    const vector<int> *pseq = seq_ptr(pos); // 直接使用函数指针对象调用函数，和函数一般调用方式一样

# 函数指针初始化
    seq_ptr = fibon_seq; // 直接将函数名赋值给函数指针即可

# 可定义函数指针数组，指向多个函数
    const vector<int>* (*seq_array[])( int ) = { f1, f2 }

# 使用枚举 enum 方法通过名字获取索引序号
    // ns_type 是可有可无的枚举标识符，可用于提示枚举的作用提示编程用
    enum (ns_type){ ns_fibon, ns_lucas, ... }; // 如 ns_fibon 对应索引 0，往后对应加 1

    // 使用枚举项
    seq_ptr = seq_array[ ns_fibon ]; // 通过枚举项名称获得对应的索引
    
    
# ********************************* chapter 2.9 设定头文件 ********************************* #

# 头文件的拓展名，习惯上是 .h；

# 函数的定义只能有一份，倒是可以有许多份声明（哪一程序需要用到该函数，就要用声明的方式告诉编译器）

# 对象定义，和函数定义一样，必须放在程序代码中；一个对象只能在程序中被定义一次；
    
    跨文件可访问对象，使用 extern 在程序文件中定义（包括赋初值）；
    
    通常在头文件用 extern 声明（不能赋初值）；


